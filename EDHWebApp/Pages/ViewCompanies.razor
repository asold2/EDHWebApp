@page "/ViewCompanies"
@using EDHWebApp.Model
@using EDHWebApp.Data
@using Microsoft.EntityFrameworkCore.Diagnostics.Internal
@inject IJSRuntime JSRuntime
@inject ICompaniesData CompaniesData
@inject NavigationManager NavigationManager;

<h3>Companies</h3>

<EditForm Model="@_customerCompanyToRegister" OnValidSubmit="@RegisterCompany">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    
    <div class="form-group">Company Name:
        <InputText @bind-Value="@_customerCompanyToRegister.Name"/>
    </div>
    <div class="form-group">Company Email:
        <InputText @bind-Value="@_customerCompanyToRegister.Email"/>
    </div>
   
    <p class="action">
        <button class="btn btn-success">Save Changes</button>
    </p>
</EditForm>

@if (allCompanies == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!allCompanies.Any())
{
    <p>
        <em>There are no companies to show</em>
    </p>
}
else
{
    <table>
        <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Email</th>
            <th>Creation Date</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var company in allCompanies)
        {
            <tr id="table_row">
                <td>@company.CompanyId</td>
                <td>@company.Name</td>
                <td>@company.Email</td>
                <td>@company.CreationDate</td>
                <td>
                    <button class="btn btn-success" @onclick="() => EditCompany(company.CompanyId)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => ShowConfirmDeleteion(company)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
        
    </table>
}




@code {


    private IList<CustomerCompany> allCompanies;
    
    private CustomerCompany _customerCompanyToRegister = new CustomerCompany();


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        allCompanies = await CompaniesData.GetAllCompanies();
    }

    private async void RegisterCompany()
    {
        if (!allCompanies.Contains(_customerCompanyToRegister))
        {
            allCompanies.Add(_customerCompanyToRegister);
            NavigationManager.NavigateTo("/ViewCompanies", true);

            await CompaniesData.RegisterCompany(_customerCompanyToRegister);

        }


    }

    public async Task ShowConfirmDeleteion(CustomerCompany customerCompany)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the company?"))
        {
            return;
        }
        else
        {
            DeleteCompany(customerCompany);
        }
    }

    private void EditCompany(int companyId)
    {
        NavigationManager.NavigateTo($"/Company/{companyId}");
    }
    
    private void DeleteCompany(CustomerCompany customerCompany)
    {
         CompaniesData.DeleteCompany(customerCompany.CompanyId);
        allCompanies.Remove(customerCompany);

    }

}