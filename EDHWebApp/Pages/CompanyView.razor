@page "/Company/{companyId}"
@using EDHWebApp.Model
@using EDHWebApp.Data
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime


@using Microsoft.AspNetCore.Mvc


@inject ICompaniesData CompaniesData;
@inject IUsersData UsersData;
<h3>Add User</h3>



    <EditForm Model="@_companyUser" OnValidSubmit="@AddUser" 
           
    >
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        
        <div class="form-group">Name:
            <InputText @bind-Value="@_companyUser.Name" style="margin-left: 3em"/>
        </div>
        <div class="form-group">Surname:
            <InputText @bind-Value="@_companyUser.Surname" style="margin-left: 2em"/>
        </div>
        <div class="form-group">Email:
            <InputText  @bind-Value="@_companyUser.Email" style="margin-left: 3em"/>
        </div>
    
        <div class="form-group">Company:
            <InputSelect style="margin-left: 3em" ValueExpression="@(()=>companyname)"
                         Value="@_customerCompany.Name"
                         ValueChanged="@((string value) => OnValueChanged(value ))">
                @foreach (var comp in companies)
                {
                    <option > @comp.Name </option>
                }
            </InputSelect>
        </div>  
        <div class="form-group">Admin:
            <InputSelect ValueExpression="@(()=>_companyUser.IsAdmin)"
                         Value="@_companyUser.IsAdmin"
                         ValueChanged="@((bool value) => OnChangeAdminStatus(value))">
                        
                <option value="true"> Yes </option>
                <option value="false"> No </option>
                            
            </InputSelect>
        </div>  
        <div class="form-group">Verified:
            <InputSelect ValueExpression="@(()=>_companyUser.VerifiedUser)"
                         Value="@_companyUser.VerifiedUser"
                         ValueChanged="@((bool value) => OnChangeVerifiedStatus(value))">
                            
                <option value="true"> Yes </option>
                <option value="false"> No </option>
                                
            </InputSelect>
        </div>
        <p class="action">
            <button class="btn btn-success" onclick="window.location.reload()" type="submit">Add User</button>
        </p>
    </EditForm>
    
    
    @if (companyUsers == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else if (!companyUsers.Any())
    {
        <p>
            <em>There are no users to show</em>
        </p>
    }
    else
    {
        <table>
            <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Surname</th>
                <th>Email</th>
                <th>Company Name</th>
                <th>Is Admin</th>
                <th>Is Verified</th>
                <th>Number of requests</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var userTemp in companyUsers)
            {
                <tr>
                    <td>@userTemp.UserId</td>
                    <td>@userTemp.Name</td>
                    <td>@userTemp.Surname</td>
                    <td>@userTemp.Email</td>
                    <td>@companyname</td>
                    <td>@userTemp.IsAdmin.ToString()</td>
                    <td>@userTemp.VerifiedUser.ToString()</td>
                    <td>@userTemp.NumberOfRequests</td>
                    <td> 
                        <button class="btn btn-success" @onclick="() => EditUser(userTemp.UserId)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ShowConfirmDeleteion(userTemp)">Delete</button>
                    </td>
                </tr>
            }
            </tbody>
    
        </table>

    
    


@code {

    [Parameter]
    public string companyId { get; set; }


    private CompanyUser _companyUser = new CompanyUser();
    private IList<CompanyUser> companyUsers = new List<CompanyUser>();
    private IList<CustomerCompany> companies = new List<CustomerCompany>();
    CustomerCompany _customerCompany = new CustomerCompany();
    int companyid = 0;
    string companyname = "";
    private string isVerified { get; set; }
    private string isAdmin { get; set; }




    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        companies = await CompaniesData.GetAllCompanies();
        companyid = Int32.Parse(companyId);
        _customerCompany = companies.FirstOrDefault(c => c.CompanyId == companyid);
        companyname = _customerCompany.Name;
        _companyUser.MyCustomerCompany = _customerCompany;
        
        companyUsers = await UsersData.GetAllUsersByCompanyId(companyid);
        
        if (!_companyUser.IsAdmin)
        {
            isAdmin = "No";
        }
        else
        {
            isAdmin = "Yes";
        }
        if (!_companyUser.VerifiedUser)
        {
            isVerified = "No";
        }
        else
        {
            isVerified = "Yes";
        }

    }

 
    
    private async void AddUser()
    {
       
        _companyUser.Role = "User";
        _companyUser.RememberMe = false;
        if(!companyUsers.Contains(_companyUser))
        {
            companyUsers.Add(_companyUser);
            await UsersData.AddUser(_companyUser);
        }
    }



    private void OnChange(CustomerCompany customerCompany)
    {
        _companyUser.MyCustomerCompany = customerCompany;
    }


    private void OnValueChanged(string value)
    {
        _customerCompany = companies.FirstOrDefault(c => c.Name.Equals(value));
        _companyUser.MyCustomerCompany = _customerCompany;
    }

    private void OnChangeAdminStatus(bool value)
    {
        _companyUser.IsAdmin = value;
    }

    private void OnChangeVerifiedStatus(bool value)
    {
        _companyUser.VerifiedUser = value;
    }

    private void EditUser(int userId)
    {
        NavigationManager.NavigateTo($"/ViewUser/{companyid}/{companyname}/{userId}");
    }
    
    private  void DeleteUser(CompanyUser companyUser)
    {
        UsersData.RemoveUser(companyUser.UserId);
        companyUsers.Remove(companyUser);

    }
    
    public async Task ShowConfirmDeleteion(CompanyUser companyUser)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this user?")) 
        {
            return;
        }
        else
        {
            DeleteUser(companyUser);
        }
    }

}    
        
        
        
        
}