@page "/ViewUser/{companyid}/{companyname}/{userId}"
@using EDHWebApp.Model
@using EDHWebApp.Data
@inject IUsersData UsersData
@inject ICompaniesData CompaniesData
@inject NavigationManager NavigationManager
<h3>ViewUser</h3>

<EditForm Model="@account" OnValidSubmit="@RegisterUser">
     <div class="container mt-3">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    
    <div>Name: @_companyUser.Name</div>
    <div>Surname: @_companyUser.Surname</div>
    <div>Email: @_companyUser.Email</div>
    <div>Company Name: @companyname</div>
    <div>Admin Status: @isAdmin</div>
    <div>Verified Status: @isVerified</div>

    <div class="form-group">Set Username:
        <InputText  @bind-Value="@account.Username" style="margin-left: 3em"/>
    </div>
    <div class="form-group">Set Password:
        <InputText  @bind-Value="@account.Password" style="margin-left: 2em"/>
    </div>
    
     <p class="action">
            <button class="btn btn-success">Save</button>
        </p>
    
    <div style="color: red; size: 20em">@CreationError</div>
  
     </div>
</EditForm>


@code {
    [Parameter]
    public string userId { get; set; }
    [Parameter]
    public string companyname { get; set; }
    [Parameter]
    public string companyid { get; set; }


    private Account account = new Account();
    private CompanyUser _companyUser = new CompanyUser();
    // private Company usersCompnay = new Company(); 
    private string isVerified = " ";
    private string isAdmin = " ";
    string usernameError = "Introduce user name!";
    string passwordError = "Introduce password!";
    protected string CreationError = "";
    int companyId = 0;


    protected override async Task OnInitializedAsync()
    {
        // Console.WriteLine(userId);
        // Console.WriteLine();
        
        
        companyId = Int32.Parse(companyid);
        account.userId = Int32.Parse(userId); 
        _companyUser = await UsersData.GetUserById(userId);
        Console.WriteLine(_companyUser.Email + "#$#$#$#$");
        Console.WriteLine(_companyUser.Role + "#$#$#$#$");
        Console.WriteLine(_companyUser.IsAdmin + "#$#$#$#$");
        Console.WriteLine(_companyUser.VerifiedUser + "#$#$#$#$");
        Console.WriteLine(_companyUser.TokenExpires + "#$#$#$#$");
        // IList<Company> companies = await CompaniesData.GetAllCompanies();
        // usersCompnay = companies.FirstOrDefault(c => c.CompanyId == companyId);
        if (!_companyUser.IsAdmin)
        {
            isAdmin = "No";
        }
        else
        {
            isAdmin = "Yes";
        }
        if (!_companyUser.VerifiedUser)
        {
            isVerified = "No";
        }
        else
        {
            isVerified = "Yes";
        }
        // user.MyCompany = usersCompnay;

    }

    private async void RegisterUser()
    {
        if (account.Password != "" && account.Username != "")
        {
            _companyUser.VerifiedUser = true;
            await UsersData.RegisterUser(account);
            NavigationManager.NavigateTo($"/Company/{companyid}");
        }
        else
        {
            CreationError = "There is some data about the animal that has not been filled out," +
                            "or has not been filled correctly!";
        }



    }

}